(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(case-fold-search t)
 '(column-number-mode t)
 '(doc-view-continuous t)
 '(ecb-layout-window-sizes (quote (("leftright-analyse" (ecb-directories-buffer-name 0.20 . 0.33) (ecb-sources-buffer-name 0.20 . 0.33) (ecb-history-buffer-name 0.20 . 0.33) (ecb-methods-buffer-name 0.16 . 0.66) (ecb-analyse-buffer-name 0.16 . 0.33)))))
 '(ecb-options-version "2.40")
 '(ecb-source-path (quote ("~/workspace/")))
 '(ecb-version-check nil)
 '(fringe-mode (quote (nil . 0)) nil (fringe))
 '(global-font-lock-mode t nil (font-lock))
 '(indicate-buffer-boundaries (quote left))
 '(indicate-empty-lines t)
 '(line-spacing 1)
 '(scroll-bar-mode (quote nil))
 '(show-paren-mode t nil (paren)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Override system default components
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Load New CEDET to override the system version
(load-file "~/.emacs.d/site-lisp/cedet/common/cedet.el")

;; Load Fabian's  Python.el
;; (load-file "~/Dropbox/system/.emacs.d/site-lisp/python/python.el")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Set home directory
(setq default-directory "~/workspace/")


;; Personal info
(setq frame-title-format "%b")
(setq user-full-name "Feng Li")
(setq user-mail-address "Feng.Li@stat.su.se")

;; Set the load path (site-lisp, and subdir also works)                         
(let ((default-directory "~/.emacs.d/site-lisp/"))
  (normal-top-level-add-to-load-path '("."))
  (normal-top-level-add-subdirs-to-load-path))

;; Environment variables 
(setenv "PATH" (concat (getenv "PATH") ":~/bin"))
(setq exec-path (append exec-path '("~/bin")))
(setenv "OMP_NUM_THREADS" "1")
(setq explicit-bash-args '("--init-file" "~/.bashrc"))

;; Suspend warnings
(setq byte-compile-warnings nil)

;; Let Alt key be the meta key
(setq x-alt-keysym 'meta)

;; A bug, could not recognize the tilde key in Swedish keyboard.
(require 'iso-transl)

;; HTML Print
(require 'htmlize-view)
(htmlize-view-add-to-files-menu)

;; SCIM bridge for Chinese input method
(require 'scim-bridge)
;; Turn on scim-mode automatically after loading .emacs
;; (add-hook 'after-init-hook 'scim-mode-on)
;; Use C-SPC for active SCIM
(scim-define-common-key ?\C-\s t)
;; Change cursor color depending on SCIM status
(setq scim-cursor-color '("red" "#00BBBB" "limegreen"))

;; Global visual line mode 
(global-visual-line-mode -1)

;; Dired mode
(add-hook 'dired-load-hook '(lambda () (require 'dired-x)))
(setq dired-omit-files-p t)
(add-hook 'dired-mode-hook
          (lambda ()
            (setq dired-omit-files "^\\.[a-z|A-Z]+\\|^\\.?#\\|^\\.$")
            (setq dired-omit-extensions '(".pyc" "CVS/" "~" ".o" ".bin" ".bak" ".obj" ".map" ".a" ".ln" ".blg" ".bbl" ".elc" ".lof" ".glo" ".idx" ".lot" ".dvi" ".fmt" ".tfm" ".class" ".fas" ".lib" ".x86f" ".sparcf" ".lo" ".la" ".toc" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs" ".idx" ".lof" ".lot" ".glo" ".blg" ".cp" ".cps" ".fn" ".fns" ".ky" ".kys" ".pg" ".pgs" ".tp" ".tps" ".vr" ".vrs"))
            (setq dired-listing-switches "-alh")
            (setq directory-free-space-args "-h")
            (define-key dired-mode-map (kbd "<return>")
              'dired-find-alternate-file) ; was dired-advertised-find-file
            (define-key dired-mode-map (kbd "<backspace>")
              (lambda () (interactive) (find-alternate-file "..")))
            (setq cursor-type 'box)
            (dired-omit-mode 1)
            (local-set-key (kbd "C-h") 'dired-omit-mode)))
(put 'dired-find-alternate-file 'disabled nil)


;; Default Height and width
(setq default-frame-alist (append (list
  '(width  . 81)  ; Width set to 81 characters
  '(height . 55)) ; Height set to 60 lines
  default-frame-alist))


;; disable tooltips
(tooltip-mode nil)

;; (require 'icicles)
;; (icy-mode 1)

(global-set-key (kbd "<home>") 'beginning-of-buffer)
(global-set-key (kbd "<end>") 'end-of-buffer)
(global-set-key (kbd "<C-M-dead-diaeresis>") 'indent-region)

;; The scratch settings
;; Disable scratch information
(setq initial-scratch-message nil)

(setq fundamental-mode 'text-mode)
(setq initial-major-mode 'text-mode) ;; text mode in scratch
(add-hook 'text-mode-hook 
          (function (lambda () (turn-on-auto-fill)))) ;; Auto fill mode

;; Kill the current buffer, without confirmation.
(fset 'my-kill-current-buffer
      [?\C-x ?k return])
(global-set-key [pause] 'my-kill-current-buffer)

;; Bind undo with the use
(global-set-key (kbd "C-z") 'undo)

;; F2 switch to previoue buffer
(defun switch-to-previous-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer)))
(global-set-key (kbd "<f2>") 'switch-to-previous-buffer)

;;;set server-start
;;(server-start)

;; Default English fonts
;; (add-to-list 'default-frame-alist '(font . "Liberation Mono-11"))
(add-to-list 'default-frame-alist '(font . "Droid Sans Mono-10"))

;; Chinese fonts
(set-fontset-font "fontset-default"
		  'han '("Microsoft YaHei" . "unicode-bmp"))
(set-fontset-font "fontset-default"
		  'cjk-misc '("Microsoft YaHei" . "unicode-bmp"))
(set-fontset-font "fontset-default"
		  'bopomofo '("Microsoft YaHei" . "unicode-bmp"))
(set-fontset-font "fontset-default"
		  'gb18030 '("Microsoft YaHei". "unicode-bmp"))
(set-fontset-font "fontset-default"
		  'symbol '("Microsoft YaHei". "unicode-bmp"))

;; Disable tool bar
(tool-bar-mode nil)

;; Disable menu bar
(menu-bar-mode t)

;;stop start up message
(setq inhibit-startup-message t)

;;y-n short
(fset 'yes-or-no-p 'y-or-n-p)

;;shift selection
(setq shift-select-mode t)

;; make typing override text selection
(delete-selection-mode 1) ; 

;; TAB settings
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)

;; Control-tab to switch among buffers TODO: not working within the console   
;; (global-set-key (kbd "C-<tab>") 'next-buffer)

;; Keep buffer order during switch 
(require 'flobl)

;; Circulate among windows Shift-F2
(global-set-key (kbd "ESC <f2>") 'next-multiframe-window) ; pc keyboard
 ;;Session(Keep section each time)
 (require 'session)
 (add-hook 'after-init-hook 'session-initialize)

;; Cursor is bar: Not clear under console
(setq-default cursor-type 'bar)

 ;;Color-Theme
 (defvar after-make-console-frame-hooks '()
 "Hooks to run after creating a new TTY frame")
 (defvar after-make-window-system-frame-hooks '()
 "Hooks to run after creating a new window-system frame")
 (defun run-after-make-frame-hooks (frame)
 "Selectively run either `after-make-console-frame-hooks' or
 `after-make-window-system-frame-hooks'"
 (select-frame frame)
 (run-hooks (if window-system
 'after-make-window-system-frame-hooks
 'after-make-console-frame-hooks)))
 (add-hook 'after-make-frame-functions 'run-after-make-frame-hooks)
 (add-hook 'after-init-hook
 (lambda ()
 (run-after-make-frame-hooks (selected-frame))))
 (require 'color-theme)
 (color-theme-initialize)
 (add-hook 'after-make-window-system-frame-hooks 'color-theme-jonadabian-slate)
 (add-hook 'after-make-console-frame-hooks 'color-theme-tty-dark)

 ;;set visible-bell
 (setq visible-bell t)

 ;;set big kill ring
 (setq kill-ring-max 150)

 ;;column and line number
 ;; (setq column-number-mode t)
 ;; (global-linum-mode 1)
 ;; (require 'linum-off)
 ;; (setq linum-disabled-modes-list 
 ;;       '(eshell-mode compilation-mode ess-mode))


 ;; Quick locate file by selection TODO: not really used.
 (global-set-key (kbd "s-s") 'rgrep)
 (global-set-key (kbd "s-l") 'find-name-dired)


 ;;auto fill mode
 ;;set length of character
 (setq default-fill-column 79)
 (dolist (hook (list
                'after-text-mode-hook
                'message-mode-hook
                'org-mode-hook
                'ess-mode-hook))
   (add-hook hook '(lambda () (auto-fill-mode 1))))


 ;;copy with other applications 
 (setq x-select-enable-clipboard t)

 (setq ring-bell-function (lambda ()  t))


;; Matlab support
(load-library "matlab-load")
(matlab-cedet-setup)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; General IDE settings (ElDoc, ECB, Comint...) 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ido mode
(require 'ido)
(ido-mode t)

 ;; ElDoc mode
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

;; Comint for input history and  scrolling
(require 'comint)
(define-key
  comint-mode-map (kbd "<up>")'comint-previous-matching-input-from-input)
(define-key 
  comint-mode-map (kbd "<down>") 'comint-next-matching-input-from-input)
(define-key 
  comint-mode-map (kbd "<C-backspace>") 'comint-kill-input)

;; Comint history length
(setq comint-input-ring-size 5000)
(setq comint-read-input-ring t)

;; Comint scroll output
(setq comint-scroll-to-bottom-on-input t)
(setq comint-scroll-to-bottom-on-output t)
(setq comint-move-point-for-output t)
(setq comint-scroll-show-maximum-output t)

 ;; Clear buffer output
(defun comint-clear-buffer ()
  (interactive)
  (goto-char (point-max))
  (move-beginning-of-line nil)
  (backward-char)
  (move-beginning-of-line nil)
  (delete-region (point-min) (point))
  (goto-char (point-max)))
(define-key comint-mode-map (kbd "C-l") 'comint-clear-buffer)


;; Replace ^M 
(fset 'my-replace-m
      [escape ?< escape ?% ?\C-q ?\C-m return ?  return ?! escape ?<])

;; Insert Current time, linux only?
(global-set-key "\C-ct" 'my-insert-time)
(defun my-insert-time ()
  (interactive)
  (insert (format-time-string "%a %b %d %H:%M:%S %Z %Y")))

;; CEDET & ECB
(global-ede-mode 1)
;;(semantic-load-enable-minimum-features)
(semantic-load-enable-code-helpers)
(global-srecode-minor-mode 1)

(require 'ecb)
(require 'ecb-autoloads)
(global-set-key [(f8)] 'ecb-toggle-ecb-windows) ; hide or show ECB windows
(global-set-key (kbd "ESC <f8>") 'ecb-activate)
;; (global-set-key (kbd "<f7>") 'ecb-cycle-through-compilation-buffers) 
(setq ecb-tip-of-the-day nil)
(setq ecb-inhibit-startup-message t)
(setq ecb-information-buffer nil)
(setq ecb-layout-name "leftright-analyse")
(setq ecb-compile-window-width 'edit-window)
(setq ecb-compile-window-height 5)
(setq ecb-enlarged-compilation-window-max-height 0.68)
(setq ecb-change-layout-preserves-compwin-state t)
(add-hook 'ecb-activate-hook 
          (lambda() 
            (setq ecb-compilation-buffer-names
                  (quote (("*info*") ("*shell*") ("*grep*") ("\\*R:*[0-9]*\\*" . t) ("*Find*")
                          ("*Locate*") ("*help*") ("*Help*") ("*dictem buffer\\*[<0-9>]*" . t)
                          ("*TeX Help*") ("\\*help\\[R:*[0-9]*\\]([.a-zA-Z0-9_]+)\\*" . t) 
                          ("\\*gud-[.a-zA-Z0-9_]+\\*" . t) ("*Python*") ("*rope-pydoc*")))) 
            (setq ecb-primary-secondary-mouse-buttons 
                  (quote mouse-1--mouse-2))))
(setq ecb-auto-activate t)  
;;


;; Flymake 
(require 'flymake)
(when (load "flymake" t)
  (add-hook 'find-file-hook 'flymake-find-file-hook) ;; auto check
  (load-library "flymake-cursor") ;; display error in minor buffer  
  (global-set-key [f4] 'flymake-goto-next-error)
  (add-hook 'LaTeX-mode-hook 'flymake-mode)
  (setq flymake-gui-warnings-enabled nil))

;; TODO: Note working
;; (when (load "flymake" t)
;;   (defun flymake-simple-tex-init ()
;;     (let* ((temp-file (flymake-init-create-temp-buffer-copy
;;                        'flymake-create-temp-inplace))
;;            (local-file (file-relative-name
;;             temp-file
;;             (file-name-directory buffer-file-name))))
;;       ;;(list "pycheckers"  (list local-file))

;;       (list "chktex" (list "-q" "-v0" local-file))
;;       ))
;;   (add-to-list 'flymake-allowed-file-name-masks
;;                '("\\.tex\\'" flymake-simple-tex-init)))


;; Auto completion
(require 'auto-complete-config)
(ac-config-default)
(ac-flyspell-workaround)
(dolist (hook '(emacs-lisp-mode-hook 
                c-mode-hook 
                c++-mode-hook 
                ess-mode-hook 
                inferior-ess-mode-hook
                python-mode-hook))
  (add-hook hook 'auto-complete-mode))
(global-set-key (kbd "ESC <f7>") 'auto-complete-mode)

;; Font lock
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)

;; Highlight parentheses 
(require 'highlight-parentheses)
(define-globalized-minor-mode global-highlight-parentheses-mode
  highlight-parentheses-mode
  (lambda ()
    (highlight-parentheses-mode t)))
(global-highlight-parentheses-mode t)


 ;; Highlight symbols 
(require 'auto-highlight-symbol)
(dolist (hook '(emacs-lisp-mode-hook 
                c-mode-hook 
                c++-mode-hook 
                ess-mode-hook
                python-mode-hook))
  (add-hook hook 'auto-highlight-symbol-mode))

;; parentheses mode
(show-paren-mode t)
(setq show-paren-style 'parentheses)

;; enable autopair insert globally
(setq skeleton-pair t)
(global-set-key "(" 'skeleton-pair-insert-maybe)
(global-set-key "[" 'skeleton-pair-insert-maybe)
(global-set-key "{" 'skeleton-pair-insert-maybe)
(global-set-key "\"" 'skeleton-pair-insert-maybe)
(global-set-key "\'" 'skeleton-pair-insert-maybe)

;; Commenting 
(global-set-key "\M-3" 'comment-or-uncomment-region) ; Swedish keyboard

(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/site-lisp/yasnippet-0.6.1c/snippets")

;; Add extra info path
(add-to-list 'Info-default-directory-list "~/.emacs.d/info")
(require 'info-look)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Spelling Check & dictionary
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Spelling Check
;; Spell checking using hunspell
(setq-default ispell-program-name "hunspell")
(setq ispell-really-hunspell t)
(setq ispell-personal-dictionary "~/.hunspell")
(setq ispell-extra-args '("-d" "en_US"))
(global-set-key (kbd "s-q") 'ispell-word)

;; Use M-m to auto correct words
(global-set-key (kbd "ESC m") 'flyspell-auto-correct-word)

;; Performance
;; (setq flyspell-issue-message-flag nil) 

;; Fly spell mode
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode))))

;; Disable flyspell for special modes
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode -1))))

;; Fly spell check comments for a programmer
(dolist (hook '(emacs-lisp-mode-hook c-mode-hook c++-mode-hook ess-mode-hook python-mode-hook))
  (add-hook hook (lambda () (flyspell-prog-mode))))

;; Dictionary
(require 'dictem)
(setq dictem-server "localhost")
(setq dictem-port   "2628")
(dictem-initialize)
(global-set-key (kbd "<f50>") 'dictem-run-search)
(fset 'my-search-dictem
      [f50 return return return])
(global-set-key (kbd "<f3>") 'my-search-dictem)
(setq dictem-default-database "Collins")
(setq dictem-default-strategy "exact")
(add-hook 'dictem-postprocess-match-hook
          'dictem-postprocess-match)
(add-hook 'dictem-postprocess-definition-hook 
	  'dictem-postprocess-definition-separator)
(add-hook 'dictem-postprocess-definition-hook 
          'dictem-postprocess-definition-hyperlinks)
(add-hook 'dictem-postprocess-show-info-hook
          'dictem-postprocess-definition-hyperlinks)
(add-hook 'dictem-postprocess-definition-hook
          'dictem-postprocess-definition-remove-header)
(define-key dictem-mode-map [tab] 'dictem-next-link)
;;(define-key dictem-mode-map [(backtab)] 'dictem-previous-link)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LaTeX settings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; load auctex 11.86
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)

;;LaTex AUCTex features
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(setq LaTeX-math-menu-unicode t)

;; Translate key § to ` so both can be used as a math abbreviation
;; Drawback, could mot type § anymore. Make it locally?  
(keyboard-translate ?§ ?`) 
(setq LaTeX-math-abbrev-prefix "`")

(add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
(setq TeX-source-correlate-start-server t)
(setq TeX-source-correlate-mode  t) ; for 11.86
(setq TeX-source-correlate-method (quote source-specials)) 
(setq bibtex-maintain-sorted-entries t)

;; Add short cuts, hold Windows key 
(defun auctex-insert-special ()
  (local-set-key (kbd "s-(") (lambda () (interactive) (insert "\\\left( ")))
  (local-set-key (kbd "s-)") (lambda () (interactive) (insert "\\\ right)")))
  
  (local-set-key (kbd "s-[") (lambda () (interactive) (insert "\\\left[ ")))
  (local-set-key (kbd "s-]") (lambda () (interactive) (insert "\\\ right]")))
  
  (local-set-key (kbd "s-{") (lambda () (interactive) (insert "\\\left{ ")))
  (local-set-key (kbd "s-}") (lambda () (interactive) (insert "\\\ right}")))
  
  (local-set-key (kbd "s-|") (lambda () (interactive) (insert "\\\left| \\\ right|")))
  
  (fset 'my-insert-latex-equation
        [?\\ ?\[ ?\\ ?\] left left return return up])
  (local-set-key (kbd "s-\\") 'my-insert-latex-equation)
  
  ;; (local-set-key (kbd "s-\\") (lambda () (interactive) (insert "\\\[\n \n\\\]")))
  
  (fset 'my-insert-bold-math
        [?\C-w ?\\ ?b ?m ?\{ ?\C-y right])
  (local-set-key (kbd "C-c C-x C-b") 'my-insert-bold-math))
(add-hook 'LaTeX-mode-hook 'auctex-insert-special)
(setq reftex-plug-into-AUCTeX t)

;; TeX view program
;;(setq TeX-view-program-selection (quote ((output-dvi "xdvi") (output-pdf "evince") )))
(add-hook 'LaTeX-mode-hook (lambda () 
                             (TeX-fold-mode 1)))
(setq TeX-save-query  nil )
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)

(add-hook 
 'LaTeX-mode-hook
 '(lambda ()
    (local-set-key "\C-c§" 'TeX-next-error)))

(add-hook 'LaTeX-mode-hook (lambda()
                             (add-to-list 'TeX-command-list
                                          '("Encrypt-PDF" "pdftk \"%s.pdf\" output \"%s.SEC.pdf\" allow Printing owner_pw \"q13JCdG20yDTZr\"; mv \"%s.SEC.pdf\" \"%s.pdf\"" TeX-run-command nil nil))
                             (add-to-list 'TeX-command-list
                                          '("Embed-Fonts-to-PDF" "gs -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=\"%s.embed.pdf\" -f  \"%s.pdf\";  mv \"%s.embed.pdf\" \"%s.pdf\" " TeX-run-command nil nil))
                             (add-to-list 'TeX-command-list
                                          '("TeX2LyX" "tex2lyx -f \"%s.tex\" \"../%s.lyx\" " TeX-run-command nil nil))
                             (add-to-list 'TeX-command-list
                                          '("LaTeXmk" "latexmk -pvc \"%s.tex\"" TeX-run-command nil nil))
                             (add-to-list 'TeX-command-list
                                          '("PdfLaTeXmk" "latexmk -pvc -pdf \"%s.tex\"" TeX-run-command nil nil))
                             
                             (add-to-list 'TeX-command-list
                                          '("LaTex-DVI-PS-PDF-Adobe" "latex \"%s.tex\"; dvips \"%s.dvi\" -o \"%s.ps\"; ps2pdf \"%s.ps\"; acroread \"%s.pdf\"" TeX-run-command nil nil)) ;;also embed all the fonts   
                             (add-to-list 'TeX-command-list
                                           '("XeLaTeX-PDF-Adobe" "xelatex \"%s.tex\"; acroread \"%s.pdf\"" TeX-run-command nil nil))
                             (add-to-list 'TeX-command-list
                                          '("LaTeX-DVIPDFMx-PDF-Adobe" "dvipdfmx %d; acroread \"%s.pdf\"" TeX-run-command nil nil))
                             (add-to-list 'TeX-command-list
                                          '("View-PDF-via-Adobe" "acroread \"%s.pdf\"" TeX-run-command nil nil))))

(defun my-LaTeX-mode-hook ()
  "Key definitions for LaTeX mode."
  (define-key LaTeX-mode-map [(f5)] 'latex-or-view)) ;;F5 works for all
(add-hook 'LaTeX-mode-hook 'my-LaTeX-mode-hook)
(fset 'latex-or-view [?\C-c ?\C-c])

 ;; delete the part before the cursor to beginning of the line and jump to end
;; of previous line. 
(fset 'my-smart-backspace
      "\C-@\C-p\C-e\C-w ")
(global-set-key [S-backspace] 'my-smart-backspace)

;; Use ? to goto matched parenthesis 
(global-set-key "?" 'goto-match-paren) ;;
(defun goto-match-paren (arg)
  "Go to the matching  if on (){}[], similar to vi style of % "
  (interactive "p")
  ;; first, check for "outside of bracket" positions expected by forward-sexp, etc.
  (cond ((looking-at "[\[\(\{]") (forward-sexp))
        ((looking-back "[\]\)\}]" 1) (backward-sexp))
         ;; now, try to succeed from inside of a bracket
        ((looking-at "[\]\)\}]") (forward-char) (backward-sexp))
        ((looking-back "[\[\(\{]" 1) (backward-char) (forward-sexp))
        (t (self-insert-command (or arg 1))))) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ESS (Emacs speaks statistics) 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ESS
(require 'ess-site)

;; R args at start up
(global-set-key (kbd "ESC <f6>") 'R) ;; The default R
(global-set-key (kbd "<f6>") 'R-2) ;; The optimized R
(setq-default inferior-R-args "--no-save --no-restore-data -q")

 ;; Let ESS Sweave work with AUCTEX
(setq ess-swv-plug-into-AUCTeX-p t)

 ;;ESS key binding
(setq ess-ask-for-ess-directory nil)

 ;; R history files and size
(setq ess-history-file "~/.Rhistory")

 ;; Let help on new frame
(setq ess-help-own-fram 'one)

(require 'ac-R) ;; auto complete for R
(require 'ess-rutils)
(require 'ess-tracebug) ;; ESS tracebug

(add-hook 'ess-mode-hook
          '(lambda ()
       
             (require 'ess-eldoc)
             (require 'r-autoyas)
             
              ;; ESS expression offset
             (setq ess-expression-offset 8)  
             
             ;; (require 'r-autoyas)
             ;; (define-key ess-mode-map (kbd "C-M-<tab>")
             ;;   '(lambda ()(interactive)
             ;;      (r-autoyas-expand nil nil)))
             
             ;; ESS tooltip (C-i)
             (require 'ess-R-object-tooltip)
             (when window-system
               (keyboard-translate ?\C-i ?\H-i)
               (define-key ess-mode-map (kbd "H-i") 'ess-R-object-tooltip)
               (define-key inferior-ess-mode-map (kbd "H-i") 'ess-R-object-tooltip))

             
             ;;Roxygen template
              (setq ess-roxy-template-alist
                    (list
                     (cons "description" "<description>")
                     (cons "details" "<details>")
                     (cons "title" "<short tile>")
                     (cons "param" "")
                     (cons "return" "")
                     (cons "references" "")
                     (cons "author" "Feng Li, Department of Statistics, Stockholm University, Sweden.")
                     (cons "note" "Created: ; Current: .")))

              (font-lock-add-keywords nil
                                      '(("\\<\\(FIXME\\):" 1 font-lock-warning-face t)
                                        ("\\<\\(DEPENDS\\):" 1 font-lock-warning-face t)
                                        ("\\<\\(TODO\\):" 1 font-lock-warning-face t)
                                        ("\\<\\(DATE\\):" 1 font-lock-warning-face t)
                                        ("\\<\\(DEBUG\\):" 1 font-lock-warning-face t)
                                        ("\\(\\\\item[ \t]+{[\._A-Za-z0-9]+}\\)" 1 font-lock-warning-face t) ;;output values hight light at comments 
                                        ("\\<\\([\._A-Za-z0-9]+\$[\-\._A-Za-z0-9]+\\):" 1 font-lock-warning-face t)))

              
              ;; Set M-§ to complete the object in the ESS editor
              ;; The default was "C-c Tab", Not needed if ac-R enabled
              (define-key ess-mode-map (kbd "<s-tab>") 'ess-complete-object-name)
              
              ;; Hide and show mode
              ;; (hs-minor-mode)
              ;; (local-set-key (kbd "<C-M-insert>") 'hs-toggle-hiding)
              
              ;; insert 8 spaces
              (fset 'my-R-smart-indent
                    [return ?\C-u ?8 ? ])
	     (local-set-key (kbd "<C-return>") 'my-R-smart-indent)
         
         ;; Insert three line comments level-1
         (fset 'my-R-comment-level-1
               [?\C-a ?\C-u ?7 ?9 ?# return ?\C-u ?3 ?# return ?\C-a ?\C-u ?7 ?9 ?# up ? ])
         (local-set-key (kbd "M-1") 'my-R-comment-level-1)
         ;; Insert three line comments level-2
         (fset 'my-R-comment-level-2
               [?\C-a ?\C-u ?3 ?# ?\C-u ?7 ?6 ?- return ?\C-u ?3 ?# return ?\C-a ?\C-u ?3 ?# ?\C-u ?7 ?6 ?- up ? ])
         (local-set-key (kbd "M-2") 'my-R-comment-level-2)
         
         ;; Smart indent
         (make-local-variable 'adaptive-fill-regexp)
         (setq adaptive-fill-regexp (concat ess-roxy-str adaptive-fill-regexp))
         (make-local-variable 'adaptive-fill-first-line-regexp)
         (setq adaptive-fill-first-line-regexp (concat ess-roxy-str
                                                       adaptive-fill-first-line-regexp))
         (make-local-variable 'paragraph-start)
         (setq paragraph-start (concat "\\(" ess-roxy-str "\\)*" paragraph-start))
         (make-local-variable 'paragraph-separate)
         (setq paragraph-separate (concat "\\(" ess-roxy-str "\\)*" paragraph-separate))
         (auto-fill-mode)))

;; Settings on R shell
(add-hook 'inferior-ess-mode-hook
          '(lambda ()
             (local-set-key (kbd "<C-up>") 'previous-line)
             (local-set-key (kbd "<C-down>") 'next-line)
             (define-key inferior-ess-mode-map (kbd "C-c `") 'ess-parse-errors)
             (define-key inferior-ess-mode-map (kbd "C-c d") 'ess-change-directory)
             (define-key inferior-ess-mode-map (kbd "C-c l") 'ess-rutils-load-wkspc)))

;; (add-hook 'ess-post-run-hook 'ess-tracebug t) 
;; (define-key ess-mode-map "\M-]" 'next-error)
;; (define-key ess-mode-map "\M-[" 'previous-error)
;; (define-key inferior-ess-mode-map "\M-]" 'next-error-no-select)
;; (define-key inferior-ess-mode-map "\M-[" 'previous-error-no-select)
;; (define-key compilation-minor-mode-map [(?n)] 'next-error-no-select)
;; (define-key compilation-minor-mode-map [(?p)] 'previous-error-no-select)

;; ESS Code styles
(defun ess-code-style ()
  (local-set-key (kbd ",") (lambda () (interactive) (insert ", ")))
  (local-set-key (kbd "=") (lambda () (interactive) (insert " = ")))
  (local-set-key (kbd "C-c =") (lambda () (interactive) (insert " == ")))
  (local-set-key (kbd "s-*") (lambda () (interactive) (insert " %*% ")))
  (local-set-key (kbd "s-x") (lambda () (interactive) (insert " %x% ")))
  (local-set-key (kbd "s-i") (lambda () (interactive) (insert " %in% "))))
(add-hook 'ess-mode-hook 'ess-code-style)
(add-hook 'inferior-ess-mode-hook 'ess-code-style)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Python IDE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Fabian' python.el
;; (setq python-shell-interpreter "python2.7")
;; (setenv "PYTHONSTARTUP" "/home/fli/.pystartup")

;; Enter to indent in python.el
(add-hook 'python-mode-hook 
          '(lambda () 
             
             (setq python-python-command "python2.7")
             
             (define-key python-mode-map "\C-m" 'newline-and-indent)
             
             ;; Pythonmacs (use Python function in Elisp)
             (autoload 'pymacs-apply "pymacs") 
             (autoload 'pymacs-call "pymacs")
             (autoload 'pymacs-eval "pymacs" nil t)
             (autoload 'pymacs-exec "pymacs" nil t)
             (autoload 'pymacs-load "pymacs" nil t)
             (pymacs-load "ropemacs" "rope-")
             (setq ropemacs-enable-autoimport t)
             (setq pymacs-auto-restart t)
             
             ;; Flymake for Python
             (when (load "flymake" t)
               (defun flymake-pyflakes-init ()
                 (let* ((temp-file (flymake-init-create-temp-buffer-copy
                                    'flymake-create-temp-inplace))
                        (local-file (file-relative-name
            temp-file
            (file-name-directory buffer-file-name))))
                   (list "pycheckers"  (list local-file))))
               (add-to-list 'flymake-allowed-file-name-masks
                            '("\\.py\\'" flymake-pyflakes-init)))
             (setq python-check-command "pyflakes") ;; check by hand
             
             ;; Auto complete in buffer
             ;; (require 'ac-python) ;; using just python (faster)
             (ac-ropemacs-initialize) ;; using rope (intensive)
             (add-hook 'python-mode-hook
                       (lambda ()
                         (add-to-list 'ac-sources 'ac-source-ropemacs)))
             
             
             ;; DEBUGGING: PDB setup, note the python version
             (setq pdb-path '/home/fli/bin/pdb2.7.py
                   gud-pdb-command-name (symbol-name pdb-path))
             (defadvice pdb (before gud-query-cmdline activate)
               "Provide a better default command line when called interactively."
               (interactive
                (list (gud-query-cmdline pdb-path
                                         (file-name-nondirectory buffer-file-name)))))
             
             ;; Documentation lookup Bugfix for Python 2.7
             (info-lookup-add-help
              :mode 'python-mode
              :regexp "[[:alnum:]_]+"
              :doc-spec
              '(("(python)Index" nil "")))
             
             ;; ElDoc for Python in the minor buffer
             (add-hook 'python-mode-hook 'turn-on-eldoc-mode)
             
             
             (defun python-add-breakpoint ()
               (interactive)
               (newline-and-indent)
               (insert "import pdb; pdb.set_trace()"))
             (add-hook 'python-mode-hook 
                       '(lambda () (define-key python-mode-map (kbd "C-c C-t") 'python-add-breakpoint)))
             
             ;; Font-Lock
             (make-face 'font-lock-special-macro-face)
             (set-face-background 'font-lock-special-macro-face "magenta")
             (set-face-foreground 'font-lock-special-macro-face "white")
             
             (add-hook 'python-mode-hook 
                       (lambda () 
                         (font-lock-add-keywords nil
                                                 '(("\\<\\(FIXME\\):" 1 font-lock-warning-face t)
                                                   ("\\<\\(DEPENDS\\):" 1 font-lock-warning-face t)
                                                   ("\\<\\(TODO\\):" 1 font-lock-warning-face t)
                                                   ("\\<\\(DATE\\):" 1 font-lock-warning-face t)
                                                   ("\\<\\(DEBUG\\):" 1 font-lock-warning-face t)
                                                   ("\\<\\(import pdb;[\n \t]*pdb.set_trace()\\)" . 'font-lock-special-macro-face)))))
             
             ;; ;; Python history and python shell TODO: how? wait for python.el
             ;; ;; (add-hook 'inferior-python-mode-hook 
             ;; ;;           '(lambda()
             ;; ;;              (setq comint-input-ring-file-name "~/.pyhistory")))
             
             ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ecb-default-highlight-face ((((class color) (background
                                                dark)) (:background "magenta" :foreground "white"))))
 '(font-lock-comment-face ((t (:foreground "grey66"))))
 '(font-lock-function-name-face ((t (:foreground "yellow" :weight
                                                 bold :italic true))))
 '(font-lock-keyword-face ((t (:foreground "#00BBBB" :weight
                                           bold)))))
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)